[ -- Linux for Bopols --- ]
     document status: in progress, by etsibala_@_gmail.com

+++ System Information

~~ Display Serial Number / Device details
  # dmidecode

+++ User Management 

~~ Show user account settins
  # chage -l <username>
  
~~ Create LVM logical volume
  # lvcreate -L 10G -n appstorelv vgdata
  # mkfs.ext3 /dev/vgdata/appstorelv
  # tune2fs -c -1 /dev/vgdata/appstorelv

~~  Renaming a logical volume (LV)
  # umount <FS>
  # lvrename /dev/vg02/lvold /dev/vg02/lvnew

~~ Reducing an existing LVM filesystem
1. Here is a sample filesystem
  # df -h /software
  /dev/mapper/rootvg-soft_lv
                         99G   36G   58G  39% /software
2. The filesystem needs to be unmounted
  #  umount /software

3. The filesystem then needs to be checked
  # e2fsck -f /dev/mapper/rootvg-soft_lv
  e2fsck 1.39 (29-May-2006)
  Pass 1: Checking inodes, blocks, and sizes
  Pass 2: Checking directory structure
  Pass 3: Checking directory connectivity
  Pass 4: Checking reference counts
  Pass 5: Checking group summary information
  /dev/mapper/rootvg-soft_lv: 15616/13107200 files (0.7% non-contiguous), 9819782/26214400 blocks

4. The following example removes 1GB to the existing filesystem
  # resize2fs /dev/mapper/rootvg-soft_lv 98G
  resize2fs 1.39 (29-May-2006)
  Resizing the filesystem on /dev/mapper/rootvg-soft_lv to 25690112 (4k) blocks.
  The filesystem on /dev/mapper/rootvg-soft_lv is now 25690112 blocks long.

  # lvreduce -L 98G /dev/mapper/rootvg-soft_lv
    WARNING: Reducing active logical volume to 98.00 GB
    THIS MAY DESTROY YOUR DATA (filesystem etc.)
  Do you really want to reduce soft_lv? [y/n]: y
    Reducing logical volume soft_lv to 98.00 GB
    Logical volume soft_lv successfully resized
    
~~ Make ISO from a directory
  # mkisofs -o file.iso /root/data
  Note: This will create an iso file called "file.iso" containing the data inside "/root/data" directory
        Required package/command: mkisofs command
		
~~ Displaying local filesystem only in posix format
  # df --local -P

~~ Sample bypassing read-only ENV variables
  # exec env -u TMOUT bash
  Note: Clears TMOUT value and then open another bash shell

~~ Create a test file with file size
  # dd if=/dev/zero of=test.txt bs=32768 count=10000

~~ Create a test file with file size
  # postfix check

~~ Check for CPU IO wait process (uninterrupted process)
  # ps -eo state,pid,cmd | grep "^D"
  # iostat
  # lsof -o <PID>

~~ Enable CPU/Mem manually
  # echo 1 > /sys/devices/system/cpu/cpuX/online
  # find /sys/devices/system/memory/ -name state -exec grep -l offline {} \; | while read x; do echo online > $x; done

~~ Find WWID
  # scsi_id -gud /dev/sda
  # ls -l /dev/disk/by-id/* | grep sda

~~ How to Trigger Manual Dump
  # echo 1 > /proc/sys/kernel/sysrq
  # echo c > /proc/sysrq -trigger 

~~ Disk Write Test
  $ dd if=/dev/zero of=testfile bs=16k count=16384
  $ dd if=/dev/zero of=testfile bs=16k count=16384 conv=fsync

~~ Crontab Example
  # crontab -e
  */5 * * * * /usr/local/bin/cpu_mem-alert.sh > /dev/null 2>&1
  0 8 * * * /usr/automation/solaris-logcheck.sh send_mail > /dev/null 2>&1

~~ Uptime readable date
  $ date -d @$(( $(date +%s) - $(cut -f1 -d. /proc/uptime) ))

~~ Manage SWAP
  # swapon -s (show swap information)
  # free -m

~~ NTP information
  # ntpq -p or ntpq -c peers 
  # ntpstat; echo $?
  # ntpdate -q <ntpserver>

~~ Build a RPM package
  Required package: rpmdevtools
  # rpmdev-setuptree (this will create a directory structure under "rpmbuild" directory)
  # cp <package_name>.tar.gz rpmbuild/SOURCES (put the package file to create under "rpmbuild/SOURCES" directory)
  # cd SPECS
  # rpmdev-newspec <package_name>
  # vi <package_name>.spec (create the specs file and modify the content)
  # rpmbuild -ba <package_name>.spec (build the specs file)
	
	
